/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AmadeusSampleContractInterface extends ethers.utils.Interface {
  functions: {
    "AUCTION_DROP_INTERVAL()": FunctionFragment;
    "AUCTION_DROP_PER_STEP()": FunctionFragment;
    "AUCTION_END_PRICE()": FunctionFragment;
    "AUCTION_PRICE_CURVE_LENGTH()": FunctionFragment;
    "AUCTION_START_PRICE()": FunctionFragment;
    "allowList(address)": FunctionFragment;
    "allowListMint(uint256)": FunctionFragment;
    "amountForAuction()": FunctionFragment;
    "amountForPublicSale()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "auctionMint(uint256)": FunctionFragment;
    "auctionPerMint()": FunctionFragment;
    "auctionSaleStartTime()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getAllowListStatus()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getAuctionPrice(uint256)": FunctionFragment;
    "getAuctionStatus()": FunctionFragment;
    "getOwnershipData(uint256)": FunctionFragment;
    "getPublicSaleStatus()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "maxPerAddressDuringMint()": FunctionFragment;
    "name()": FunctionFragment;
    "nextOwnerToExplicitlySet()": FunctionFragment;
    "numberMinted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "publicPrice()": FunctionFragment;
    "publicSaleMint(uint256)": FunctionFragment;
    "publicSalePerMint()": FunctionFragment;
    "publicSaleStatus()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveMint(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setAllowList(address[])": FunctionFragment;
    "setAllowListStatus(bool)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setAuctionSaleEnd()": FunctionFragment;
    "setAuctionSaleStart()": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setOwnersExplicit(uint256)": FunctionFragment;
    "setPublicSaleStatus(bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawMoney()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUCTION_DROP_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUCTION_DROP_PER_STEP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUCTION_END_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUCTION_PRICE_CURVE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUCTION_START_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allowList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowListMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "amountForAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountForPublicSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionPerMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionSaleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllowListStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnershipData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicSaleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPerAddressDuringMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextOwnerToExplicitlySet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberMinted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicSalePerMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionSaleEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionSaleStart",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOwnersExplicit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSaleStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMoney",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_DROP_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUCTION_DROP_PER_STEP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUCTION_END_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUCTION_PRICE_CURVE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUCTION_START_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowListMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountForAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountForPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionPerMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSaleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowListStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnershipData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPerAddressDuringMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOwnerToExplicitlySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSalePerMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionSaleEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionSaleStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOwnersExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMoney",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class AmadeusSampleContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AmadeusSampleContractInterface;

  functions: {
    AUCTION_DROP_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    AUCTION_DROP_PER_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    AUCTION_END_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    AUCTION_PRICE_CURVE_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    AUCTION_START_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowListMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amountForAuction(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountForPublicSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionPerMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionSaleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllowListStatus(overrides?: CallOverrides): Promise<[boolean]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuctionPrice(
      _saleStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionStatus(overrides?: CallOverrides): Promise<[boolean]>;

    getOwnershipData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { addr: string; startTimestamp: BigNumber }]
    >;

    getPublicSaleStatus(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxPerAddressDuringMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextOwnerToExplicitlySet(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberMinted(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publicSalePerMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleStatus(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveMint(
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowList(
      allowList_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowListStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionSaleEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionSaleStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwnersExplicit(
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicSaleStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawMoney(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AUCTION_DROP_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  AUCTION_DROP_PER_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  AUCTION_END_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  AUCTION_PRICE_CURVE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  AUCTION_START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  allowList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowListMint(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amountForAuction(overrides?: CallOverrides): Promise<BigNumber>;

  amountForPublicSale(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionMint(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionPerMint(overrides?: CallOverrides): Promise<BigNumber>;

  auctionSaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAllowListStatus(overrides?: CallOverrides): Promise<boolean>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAuctionPrice(
    _saleStartTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionStatus(overrides?: CallOverrides): Promise<boolean>;

  getOwnershipData(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { addr: string; startTimestamp: BigNumber }>;

  getPublicSaleStatus(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxPerAddressDuringMint(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nextOwnerToExplicitlySet(overrides?: CallOverrides): Promise<BigNumber>;

  numberMinted(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  publicPrice(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleMint(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publicSalePerMint(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleStatus(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveMint(
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowList(
    allowList_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowListStatus(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionSaleEnd(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionSaleStart(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwnersExplicit(
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicSaleStatus(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawMoney(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUCTION_DROP_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    AUCTION_DROP_PER_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    AUCTION_END_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    AUCTION_PRICE_CURVE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    AUCTION_START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowListMint(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    amountForAuction(overrides?: CallOverrides): Promise<BigNumber>;

    amountForPublicSale(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionMint(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionPerMint(overrides?: CallOverrides): Promise<BigNumber>;

    auctionSaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllowListStatus(overrides?: CallOverrides): Promise<boolean>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuctionPrice(
      _saleStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStatus(overrides?: CallOverrides): Promise<boolean>;

    getOwnershipData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { addr: string; startTimestamp: BigNumber }
    >;

    getPublicSaleStatus(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxPerAddressDuringMint(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextOwnerToExplicitlySet(overrides?: CallOverrides): Promise<BigNumber>;

    numberMinted(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    publicPrice(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleMint(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    publicSalePerMint(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStatus(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveMint(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowList(
      allowList_: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowListStatus(
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionSaleEnd(overrides?: CallOverrides): Promise<void>;

    setAuctionSaleStart(overrides?: CallOverrides): Promise<void>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    setOwnersExplicit(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicSaleStatus(
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMoney(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    AUCTION_DROP_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    AUCTION_DROP_PER_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    AUCTION_END_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    AUCTION_PRICE_CURVE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    AUCTION_START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowListMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amountForAuction(overrides?: CallOverrides): Promise<BigNumber>;

    amountForPublicSale(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionPerMint(overrides?: CallOverrides): Promise<BigNumber>;

    auctionSaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllowListStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionPrice(
      _saleStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnershipData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicSaleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPerAddressDuringMint(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextOwnerToExplicitlySet(overrides?: CallOverrides): Promise<BigNumber>;

    numberMinted(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicPrice(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publicSalePerMint(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveMint(
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowList(
      allowList_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowListStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionSaleEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionSaleStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwnersExplicit(
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicSaleStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawMoney(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUCTION_DROP_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AUCTION_DROP_PER_STEP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AUCTION_END_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AUCTION_PRICE_CURVE_LENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AUCTION_START_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowListMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amountForAuction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountForPublicSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionPerMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionSaleStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowListStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionPrice(
      _saleStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnershipData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicSaleStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPerAddressDuringMint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOwnerToExplicitlySet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberMinted(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicSaleMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publicSalePerMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicSaleStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveMint(
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowList(
      allowList_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowListStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionSaleEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionSaleStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwnersExplicit(
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSaleStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMoney(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
